import{_ as s,c as i,o as a,R as n}from"./chunks/framework.U_vFYqrf.js";const g=JSON.parse('{"title":"Clash for windows Mixin 配置","description":"","frontmatter":{"tags":["clash"]},"headers":[],"relativePath":"tech/other/cfw-mixin.md","filePath":"tech/other/cfw-mixin.md","lastUpdated":1701662868000}'),e={name:"tech/other/cfw-mixin.md"},t=n(`<h1 id="clash-for-windows-mixin-配置" tabindex="-1">Clash for windows Mixin 配置 <a class="header-anchor" href="#clash-for-windows-mixin-配置" aria-label="Permalink to &quot;Clash for windows Mixin 配置&quot;">​</a></h1><blockquote><p>详细教程请查看 <a href="https://docs.cfw.lbyczf.com/contents/mixin.html#javascript" target="_blank" rel="noreferrer">官方文档</a></p></blockquote><h2 id="yaml" tabindex="-1">YAML <a class="header-anchor" href="#yaml" aria-label="Permalink to &quot;YAML&quot;">​</a></h2><p>找到 <code>General</code> -&gt; <code>Mixin</code> 开启选项，点击小齿轮编写配置文件：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mixin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># object</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  dns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ...</span></span></code></pre></div><p>保存后会将 Mixin 中的自定义配置规则项覆盖原有文件规则，没有修改的不会覆盖。</p><p>例如上面修改了 <code>rules</code> 和 <code>dns</code> 配置项，则只会覆盖这两项，其他没有修改的不会被覆盖，继续保持原有规则。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>原有的配置文件不会被修改，这里的覆盖是指在内存中生成一份新的配置文件并使用它，关闭 Mixin 选项则恢复使用原有配置。</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>点击 <code>General</code> -&gt; <code>Clash Core</code> 的第一个芯片状小图标预览最终提交给 Clash Core 的配置文件。</p></div><h2 id="javascrip" tabindex="-1">JavaScrip <a class="header-anchor" href="#javascrip" aria-label="Permalink to &quot;JavaScrip&quot;">​</a></h2><p>如果我们想更灵活的修改或追加配置文件内容，可以使用 JavaScrip 进行混合生成。</p><p>找到 <code>Setting</code> -&gt; <code>Mixin</code> 选项组，将 <code>Type</code> 修改为 <code>JavaScrip</code> 选项，点击 <code>JavaScrip</code> -&gt; <code>Edit</code> 编辑：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">axios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">yaml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">notify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> extra</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line has-focus"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;DOMAIN-SUFFIX,bing.com,🚀 节点选择&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line has-focus"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;IP-CIDR,8.288.176.170/32,🚀 节点选择&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content.rules,</span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">extra }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>参数 <code>content</code> 表示将原有配置 YAML 配置文件序列化之后的 JavaScrip 对象，函数内定义的 <code>extra</code> 对象表示自定义配置的规则对象。</p><p>这里我想要修改 <code>rules</code> 配置项，它接收的值包含规则的字符串数组。</p><p>因为我想要追加规则，而不是像之前 YAML 配置中那样覆盖规则，所以我将自定义规则结合使用 <code>content.rules</code> 获取原有的 <code>rules</code> 项，合并为一个新的数组。</p><p>最后将 <code>content</code> 和 <code>extra</code> 合并成一个新对象返回出去，CFW 会将返回的对象序列化后直接载入。</p>`,17),h=[t];function l(p,k,c,d,o,r){return a(),i("div",null,h)}const y=s(e,[["render",l]]);export{g as __pageData,y as default};
